name: Secure CI/CD with ArgoCD 

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'k8s-manifests/deployment.yaml/*.yaml'
      - '*.md'
      - 'docs/**'

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}
  K8S_MANIFEST_DIR: k8s-manifests
  ARGOCD_APP: food-app

permissions:
  contents: read
  packages: write

jobs:
  test:
    name: Unit Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [menu-service, order-service, payment-service, user-service]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'src/${{ matrix.service }}/package-lock.json'
      
      - name: Install dependencies
        working-directory: src/${{ matrix.service }}
        run: npm ci
      
      - name: Run tests
        working-directory: src/${{ matrix.service }}
        run: npm test || echo "No tests found for ${{ matrix.service }}"

  lint:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [menu-service, order-service, payment-service, user-service]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'src/${{ matrix.service }}/package-lock.json'
      
      - name: Install dependencies
        working-directory: src/${{ matrix.service }}
        run: npm ci
      
      - name: Run ESLint
        working-directory: src/${{ matrix.service }}
        run: npm run lint || echo "No lint script found for ${{ matrix.service }}"

  build-and-push:
    name: Build & Push Docker Images (matrix)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [menu-service, order-service, payment-service, user-service]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build + Push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./src/${{ matrix.service }}
          file: ./src/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Emit image info
        run: |
          echo "service=${{ matrix.service }}" >> $GITHUB_OUTPUT
          echo "image=${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  update-and-deploy:
    name: Update Manifests, Push, ArgoCD Sync & Wait (with rollback)
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: production
    steps:
      - name: Checkout (full repo)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GHCR_TOKEN }}

      - name: Set Git author
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "${{ secrets.GH_EMAIL || 'github-actions[bot]@users.noreply.github.com' }}"

      - name: Compute SHORT_SHA
        id: short
        run: echo "SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Update k8s manifest image tags
        run: |
          SHORT=${{ steps.short.outputs.SHORT_SHA }}
          OWNER=${{ github.repository_owner }}
          for svc in menu-service order-service payment-service user-service; do
            FILE="${{ env.K8S_MANIFEST_DIR }}/${svc}-deployment.yaml"
            if [ -f "$FILE" ]; then
              echo "Updating $FILE -> ${OWNER}/${svc}:main-${SHORT}"
              sed -i -E "s|(ghcr.io/${OWNER}/${svc}):[^\s\"']+|\1:main-${SHORT}|g" "$FILE"
            fi
          done

      - name: Commit & push manifest updates
        run: |
          git add ${{ env.K8S_MANIFEST_DIR }}/*.yaml || true
          if git diff --staged --quiet; then
            echo "No manifest changes to commit."
          else
            git commit -m "chore(ci): update manifest image tags ${GITHUB_SHA}"
            git push origin HEAD
          fi

    
      
